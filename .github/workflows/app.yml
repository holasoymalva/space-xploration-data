name: Update Space Data

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Configure Git
      run: |
        git config --global user.name "holasoymalva"
        git config --global user.email "alquimista3301@gmail.com"
    
    - name: Create script file
      run: |
        cat > update_data.py << 'EOL'
import requests
import json
import os
from datetime import datetime

# Configuraci칩n
JSON_FILE_PATH = "data/space_data.json"
API_URL = "https://api.spacexdata.com/v4/launches/latest"

def fetch_space_data():
    try:
        response = requests.get(API_URL)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error al obtener datos de la API: {e}")
        return None

def update_json_file(file_path, new_data):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r') as file:
                existing_data = json.load(file)
        except json.JSONDecodeError:
            existing_data = {"launches": [], "last_check": ""}
    else:
        existing_data = {"launches": [], "last_check": ""}
    
    current_time = datetime.now().isoformat()
    existing_data["last_check"] = current_time
    
    if new_data:
        existing_ids = [launch.get("id") for launch in existing_data["launches"]]
        if new_data.get("id") not in existing_ids:
            new_data["updated_at"] = current_time
            existing_data["launches"].append(new_data)
    
    with open(file_path, 'w') as file:
        json.dump(existing_data, file, indent=2)
    
    return True

# Ejecutar actualizaci칩n
space_data = fetch_space_data()
updated = update_json_file(JSON_FILE_PATH, space_data)
print(f"Datos actualizados: {updated}")
EOL
    
    - name: Run updater script
      run: |
        mkdir -p data
        python update_data.py
    
    - name: Commit and push
      run: |
        git add data/
        git commit -m "Actualizaci칩n autom치tica de datos espaciales - $(date +'%Y-%m-%d %H:%M:%S')" --allow-empty
        git push